#!/usr/bin/perl -w

use strict;
use BSON 0.12;
use warnings FATAL => qw(all);
use 5.10.0;

my $proxy_lport = 27017; # What port do we listen on?
my $proxycfg = "file:mongoe.cfg"; # Right now this is the only cfg method

##
# Plumbing for the 1.x (not 0.x!) version of the Mongo Perl bindings
use lib '.'; # Only needed if you've unpacked the Perl mongo driver as a subdir of here
use MongoDB::_Protocol;
use MongoDB::_Link;
use MongoDB::Error;
##

my $proxy; # Holds global proxy state

##
# Plumbing for Net::Server, which manages connections
# so I just write a handler for incoming clients
package MongoProxy;
use base qw(Net::Server);
use Data::Dumper;
$Data::Dumper::Indent=3;
#

main();

###################
# mongoe
#
# Calls private methods of the Perl Mongo driver (1.x)
# Sorry about that
#
# Author: Pat Gunn <pgunn@dachte.org>
# Apache License

sub process_request
{	# When you use Net::Server, you provide an entry point for
	# handling incoming connections, and it spawns a thread per
	# client, beginning execution at that entry point with STDIN/STDOUT
	# mapped to the network socket. This is that entry point for
	# mongoe
	#
	# http://docs.mongodb.org/meta-driver/latest/legacy/mongodb-wire-protocol/
	# Documents the formatting of the messages being passed back and forth.
	# If you modify this, be meticulous with reading that so you don't create
	# deadlocks

my ($self) = @_;
my $client = *STDIN;
binmode $client;
binmode STDOUT;
my $pool;
while(! eof($client))
	{
	# Read the 4 int32 fields that are the MsgHeader
	my $request;
	$request = ""; # Empty. Not sure if this can happen.
	my %req = read_message($client);
	print STDERR info_message(%req);
	if(command_admin(\%req))	# If it targets the admin schema, we probably need to 
		{			# handle it specially
		my $cmd = extract_admin_cmd(\%req) // 'EMPTY';
		print STDERR "ADMIN command [$cmd]\n";
		if(cmd_forbidden($cmd))
			{	# "db.shutdownserver()"
			my $resp = bson_i_refuse($req{reqid_decoded});
			my %respinfo = parse_reply($resp);
			print STDERR info_message(%respinfo);
			print $resp;
			}
		elsif($cmd eq 'listDatabases')
			{	# "show dbs"
				# Foreach backend:
				#	result = issue a listDatabases 
				#	filter result by mongoe routing config
				# Unify those into a larger JSON structure
				# TODO Refactor this
			my %master_schemot = build_filtered_schemalist($req{raw}, $pool);
			my $cli_resp = bson_response_listDatabases(%master_schemot);
			# TODO Decode and print too
			print $cli_resp;
			}
		else # For now passthrough anything not forbidden
			{
			my $conn = ensure_mongo_connection($pool, route_for_destination($req{schema})); # Will be _DEFAULT until we figure out something better
			$conn->write($req{raw});
			if(! $conn->remote_connected() )
				{print STDERR "Warning: mongod for $req{schema} has disconnected\n";}
			my $resp = $conn->read(); # TODO I need to add a handler for NetworkError events.
			my %respinfo = parse_reply($resp); # Already been read in, parse it
			print STDERR info_message(%respinfo);
			print $resp;
			}
		}
	# TODO Need handler for other requests that don't target a schema
	else # Standard command, just pass it along based on target schema
		{
		my $conn = ensure_mongo_connection($pool, route_for_destination($req{schema}));
		$conn->write($req{raw});
		if(! $conn->remote_connected() )
			{print STDERR "Warning: mongod for $req{schema} has disconnected\n";}
		my $resp = $conn->read(); # TODO I need to add a handler for NetworkError events.
		my %respinfo = parse_reply($resp); # Already been read in, parse it
		print STDERR info_message(%respinfo);
		print $resp;
		}
	}
}

sub cleaner($)
{	# Wire protocol details include binary data but are still potentially
	# interesting to log. This cleans them up for display
my ($toclean) = @_;
$toclean =~ s/[^[:ascii:]]/\?/g;
$toclean =~ s/[^[:print:]]/\?/g;
$toclean =~ tr/\n\f\r/\?/d;
return $toclean;
}

##################
# Router

sub setup_proxy($)
{	# Read the proxy config string, setup the global proxy state
	# (hashref) for what schema maps to where
my ($cfg) = @_;
my %ret;

my ($mode, $args) = split(':', $cfg, 2);
if($mode eq 'file')
	{%ret = load_proxyinfo_from_file($args);}
else	{die "Unsupported proxy method [$mode]\n";}

return \%ret;
}

sub load_proxyinfo_from_file($)
{	# Load a colon-separated file that maps:
	# SCHEMA:HOST:PORT
my ($fn) = @_;
my %ret;
open(my $fh, $fn) || die "Could not open proxy descriptor file [$fn]:$!\n";
while(<$fh>)
	{
	tr/\n\r\f//d; # Remove newlines and stuff
	s/#.*//; # Strip comments
	s/^\s+//;
	s/\s+$//;
	next if(/^$/); # Skip blank lines
	my($schema, $host, $port) = split(':', $_);
	$ret{$schema}{host} = $host;
	$ret{$schema}{port} = $port;
	#print "Learned schema [$schema]\n";
	}
close($fh);
if(! defined($ret{_DEFAULT}))
	{die "You must define a _DEFAULT schema\n";}

return %ret;
}

sub route_for_destination($)
{	# Given a schema, return the (host,port) pair it maps to
my ($schema) = @_;

my ($host, $port); # Return this
if(! defined($$proxy{$schema}))
	{$schema = "_DEFAULT";} # We should always have entries for this

$host = $$proxy{$schema}{host};
$port = $$proxy{$schema}{port};
return ($host, $port);
}

sub get_router_iterable
{	# Packages the entire routing config up into a single data structure
	# for something to walk it efficiently by endpoint rather than by schema served.
	# Returns a multidimensional hash with ip and port as the 2 keys, and the value
	# being a reference to a list of the schemas served by the endpoint. 
	# TODO: Evaluate Key-value with URL as key, value still as listref or maybe CSV
my %ret;
my @schemot = keys %$proxy;
foreach my $schema (@schemot)
	{
	my $host = $$proxy{$schema}{host};
	my $port = $$proxy{$schema}{port};
	push(@{$ret{$host}{$port}}, $schema);
	}
return %ret;
}

##################
# Wire Protocol and BSON stuff

sub bson_docset_to_docarray($;$)
{	# Given BSON data that can contain multiple documents, and a specifier
	# how many how many documents should be in there, return an array of
	# those documents.
my ($data, $numdocs) = @_;
my @ret;
while(length($data))
	{
	open(my $dfh, "<", \$data) || die "Failed to disassemble data: $!\n";
	read($dfh, my $msglen, 4) || die "Misparse in data disassembly: Partial document read\n";
	close($dfh);
	my $msglen_decoded = unpack('l', $msglen);
	my $thisdoc = substr($data, 0, $msglen_decoded, ''); # Destructive substr
	push(@ret, $thisdoc);
	if(defined $numdocs)
		{$numdocs--;}
	}
if( (defined $numdocs) && ($numdocs != 0))
	{die "Protocol error in unpacking BSON docset\n";}
#print STDERR "PARSED: I saw " . scalar(@ret) . " DOCUMENTS\n";
return @ret;
}

sub info_message(%)
{	# TODO When we can decode BSON better, we can make this much, much nicer.
	#	We may eventually pull all this stuff into an object interface, which
	#	would make the code cleaner too.
my %msg = @_;
my $ret = '';
$ret .= "Message(" . $msg{msglen_decoded} . "): " . $msg{opname} . "(" . $msg{opcode_decoded} . ")\n";
if(defined $msg{schema}) {$ret .= "\tSchema: $msg{schema}\n";}
if(defined $msg{table}) {$ret .= "\tTable: $msg{table}\n";}
if(defined $msg{reqid_decoded}) {$ret .= "\tRequest has ID " . $msg{reqid_decoded} . "\n";}
if(defined $msg{respto_decoded}) {$ret .= "\tRequest is to ID " . $msg{respto_decoded} . "\n";}
if(defined $msg{bson})
	{
	$ret .= "--------BEGIN DUMPER--------\n";
	$ret .= Dumper($msg{bson}) . "\n";
	$ret .= "--------END DUMPER--------\n";
	}
#$ret .= "\t[" . cleaner($msg{raw}) . "]\n";
return $ret;
}

sub parse_reply($)
{	# parse the reply sent by a backend server
my ($resp) = @_;

open(my $rfh, "<", \$resp) || die "Failed to open response: $!\n";
my %ret = read_message($rfh);
close($rfh);
return %ret;
}

sub read_message($)
{
my ($fh) = @_;

my %ret;
read($fh, $ret{msglen}, 4); # Size of messages in bytes, including header!
read($fh, $ret{reqid} , 4);
read($fh, $ret{respto}, 4);
read($fh, $ret{opcode}, 4);
$ret{raw} = join('', @ret{"msglen", "reqid", "respto", "opcode"});
$ret{msglen_decoded} = unpack('l', $ret{msglen});
$ret{opcode_decoded} = unpack('l', $ret{opcode});
$ret{reqid_decoded} = unpack('l', $ret{reqid});
$ret{respto_decoded} = unpack('l', $ret{respto});
my $content;

if($ret{msglen_decoded} > 16)
	{read($fh, $content, ($ret{msglen_decoded} - 16));}

parse_op($ret{opcode}, $content, \%ret);

$ret{raw} .= $content;
return %ret;
}

sub parse_op($$$)
{	# Pass in: (non-decoded) opcode, request
	# Passes back: opname, schema, table
	# TODO: opcode is part of opinfo. Refactor arg passing
my ($opcode, $request, $opinfo) = @_;

my $opcode_d = unpack('l', $opcode);
if($opcode_d == 2001) # OP_UPDATE
	{
	my (undef, $coll) = unpack("lZ*", $request); # ZERO, collection, flags, selectorDocument, updateDocument
	my $selectordoc = substr($request, 9+length($coll)); # 2L + strlen + null-termination
		# TODO The selectordoc starts with an int32 that's its (packed) length.
		# We should substr once (no-replace) to pull the updatedocument out,
		# then substr again (with replace) to trim the selectordoc down to its desired parts.
	my ($schema, $table) = split(/\./, $coll);
	@$opinfo{'opname','schema','table'} = ('OP_UPDATE', $schema, $table);
	}
elsif($opcode_d == 2002) # OP_INSERT
	{
	my (undef, $coll) = unpack("lZ*", $request); # Flags, collection, documents
	my $qdoc = substr($request, 5+length($coll)); # 1L + strlen + null-termination
	my @dec_docset = map
				{
				BSON::decode($_, ixhash=>1)
				} bson_docset_to_docarray($qdoc);
	
	my ($schema, $table) = split(/\./, $coll);
	@$opinfo{'opname','schema','table', 'bson'} = ('OP_INSERT', $schema, $table, \@dec_docset );
	}
elsif($opcode_d == 2004) # OP_QUERY
	{
	my (undef, $coll) = unpack("lZ*", $request); # Flags, collection, skip, return, the rest
	my $qdoc = substr($request, 13+length($coll)); # 3L + strlen + null-termination

	my @doc = (BSON::decode($qdoc, ixhash=>1));

	my ($schema, $table) = split(/\./, $coll);
	@$opinfo{'opname','schema','table', 'bson'} = ('OP_QUERY', $schema, $table, \@doc);
	}
elsif($opcode_d == 2005) # OP_GET_MORE
	{
	my (undef, $coll) = unpack("lZ*", $request);
	my ($schema, $table) = split(/\./, $coll);
	@$opinfo{'opname','schema','table'} = ('OP_GET_MORE', $schema, $table);
	}
elsif($opcode_d == 2006) # OP_DELETE
	{
	my (undef, $coll) = unpack("lZ*", $request);
	my $qdoc = substr($request, 9+length($coll)); # 2L + strlen + null-termination
	my @doc = (BSON::decode($qdoc, ixhash=>1));
	my ($schema, $table) = split(/\./, $coll);
	@$opinfo{'opname','schema','table', 'bson'} = ('OP_DELETE', $schema, $table, \@doc );
	}
elsif($opcode_d == 2007) # OP_KILL_CURSORS
	{
	@$opinfo{'opname'} = ('OP_KILL_CURSORS');
	}
elsif($opcode_d == 1) # OP_REPLY
	{
	my(undef, $cursorid, $startfrom, $numret) = unpack("lqll", $request); # first field is response flags
	my $qdoc = substr($request, 20); # 5L
	my @dec_docset = map
				{
				BSON::decode($_, ixhash=>1)
				} bson_docset_to_docarray($qdoc, $numret);
	@$opinfo{'opname', 'bson'} = ('OP_REPLY', 
								\@dec_docset
								);
	#@$opinfo{'opname'} = ('OP_REPLY'); # First try with no BSON decode
	}
else
	{
	@$opinfo{'opname'} = ('OP_UNKNOWN');
	}
}

sub command_admin
{
my ($req_r) = @_;

if((defined $$req_r{schema}) && ($$req_r{schema} eq 'admin'))
	{return 1;}
else	{return 0;}
}

sub extract_admin_cmd
{
my ($req_r) = @_;

my @bsonlist = @{$$req_r{bson}};
my $hr = $bsonlist[0];
return (keys(%$hr))[0];		# Review Tie::IxHash for how this works; 
				# most commands in JSON look like the
				# commandname mapped to a value we don't
				# care about
}

sub extract_schema_info_from_response
{	# Return a hash with database names as the key, value is
	# something extract_schema_info_from_response() can use.
my ($req_r) = @_;
my %ret;
my @bsonlist = @{$$req_r{bson}};
my $rep_r = $bsonlist[0];
my @dbs = @{$$rep_r{databases}};
foreach my $db (@dbs)
	{
	$ret{$$db{name}}{sizeOnDisk} = $$db{sizeOnDisk};
	$ret{$$db{name}}{empty} = $$db{empty};
	}
return %ret;
}

sub build_filtered_schemalist
{	# Reach out to backend databases, build a data structure with info on schemas
	# that exist on them that we can reach with our current config, suitable for
	# building a response to the listDatabases command
	# Note: This will be redone every time the command is run; cache logic would be
	# tricky to write for a lot of reasons.
my ($listreq, $pool) = @_; # Save us the trouble of constructing it. # XXX Someday we should construct it anyhow
my %routes = get_router_iterable();
my %filtered_schemot; # To be copied in as we validate
my %latemassage;
foreach my $host (keys %routes)
	{
	foreach my $port (keys %{$routes{$host}})
		{
		print STDERR "b_f_s: host [$host] port [$port]\n";
		my @reg_schemot = @{$routes{$host}{$port}};
		my $conn = ensure_mongo_connection($pool, $host, $port);
		$conn->write($listreq);
		if(! $conn->remote_connected() )
			{ print STDERR "Warning: mongod for host [$host]:[$port] has disconnected\n";}
		my $resp = $conn->read();
		my %resp_decoded = parse_reply($resp);
		my %sch_info = extract_schema_info_from_response(\%resp_decoded);
		print STDERR info_message(%resp_decoded); # Hope this isn't confusing
		foreach my $schema (@reg_schemot) # Only copy info if it's in a schema exposed by our config
			{
			if(defined $sch_info{$schema})
				{$filtered_schemot{$schema} = $sch_info{$schema}}
			if(grep{$_ eq '_DEFAULT'} @reg_schemot)
				{	# A mongo ordinarily exposes all schemot that it explicitly is specified to
					# serve, and no other schemot. A mongo which is listed as _DEFAULT will still
					# do that, but it will also (with lower priority) expose the rest of its schemot
					# to a "show dbs". Doing that "lower priority" thing requires us to do this
					# "late massage" logic. Note: This is a policy choice; we could refuse to service
					# requests to schemot (or list them) that we don't know about, but that'd make
					# mongoe much less transparent.
				%latemassage = %sch_info; # Stash
				}
			}
		}
	}
foreach my $softschema (keys %latemassage) # Second, lower-priority pass
	{
	if(! defined($filtered_schemot{$softschema}))
		{$filtered_schemot{$softschema} = $latemassage{$softschema};}
	}
return %filtered_schemot;
}

sub cmd_forbidden($)
{	# XXX Probably need a longer list
my ($cmd) = @_;

my @forbidden = qw/shutdown replSetGetStatus replSetFreeze replSetInitiate replSetMaintenance replSetReconfig replSetStepDown replSetSyncFrom resync replSetGetConfig flushRouterComnfig addShard cleanupOrphaned checkShardingIndex enableSharding listShards removeShard getShardMap getShardVersion mergeChunks setShardVersion shardCollection shardingSTate unsetSharding split splitChunk splitVector medianKey moveChunk movePrimary isdbgrid logRotate/;
if(grep{$cmd eq $_} @forbidden) {return 1;}
return 0;
}

##################
# Speak BSON

sub bson_i_refuse
{	# Generate an OP_REPLY with a payload amounting to refusing an operation
my ($reqid) = @_; # Need this to generate a valid response
	#	document =
	#		BSON::encode(
	#			errmsg => "Forbidden",
	#			ok => 0
	#			)
my $payload = BSON::encode({errmsg  => 'Forbidden', 'ok' => 0});
my $respflags=0;
vec($respflags, 1,1) = 1; # QueryFailure is true

my $mlength = length($payload) + 36; # 28 from the int32 + 8 from the int64
my $ret = pack('lllllqll', 		# Header:
		$mlength,			# int32 requestID
		int( rand( 2**31 - 1 ) ),	# int32 requestID
		$reqid,				# int32 "what we're replying to"
		1,				# OP_REPLY
						# --- Begin Body ---
		$respflags,			# int32 responseFlags, bits 0+1 high
		0,				# int64 CursorID
		0,				# int32 startingFrom
		1)				# int32 numReturned
.		$payload;
return $ret;
}

sub bson_response_listDatabases
{	# Generate an OP_REPLY with a payload that's a valid response to listDatabases
my %dbinfo = @_;
my $ret;
# TODO
print STDERR "Pre\n";
print STDERR Dumper(\%dbinfo);
die;
return $ret;
}

##################
# Poor man's connection pool

sub ensure_mongo_connection
{	# Make sure there's a connection to this server.
	# Return that connection.
my ($pool, $host, $port) = @_;

if(! defined($$pool{"$host$port"})) # TODO OR if the connection is no longer up....
	{
	my $conn = MongoDB::_Link->new("$host:$port");
	$conn->connect();
	$$pool{"$host$port"} = $conn;
	}
return $$pool{"$host$port"};
}


##################
sub main
{	# When you use Net::Server, your main function is primarily
	# to prepare you to enter the event loop the module provides
$proxy = setup_proxy($proxycfg);
MongoProxy->run(port => $proxy_lport);
}

