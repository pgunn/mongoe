#!/usr/bin/env python

from __future__ import print_function
from struct import *

import pprint
import StringIO
import string
import SocketServer
import sys
import re

proxy_lport = 27017 # What port do we listen on?
proxycfg = "file:mongoe.cfg" # Right now this is the only cfg method

class MyTCPHandler(SocketServer.StreamRequestHandler):
	def process_request(self):
		cleaner("hi")
		pass
	def handle(self):
		self.process_request()
#########
# mongoe
#
# Author: Pat Gunn <pgunn@dachte.org>
# Apache License

def cleaner(toclean):
	# Wire protocol details include binary data but are still potentially
	# interesting to log. This cleans them up for display
	# XXX Presently we don't use this, so let's not bother porting it
	pass

###############
# Router
def setup_proxy(cfgspec):
	# Read the proxy config string, setup the global proxy state
	# returns associative array for what schema maps to where
	(mode, args) = string.split(cfgspec, ':', 1)
	if(mode == 'file'):
		ret = load_proxyinfo_from_file(args)
	else:
		print("Unsupported proxy method [" + mode + "\n", file=sys.stderr)
		sys.exit(1)
	return ret

def load_proxyinfo_from_file(fn):
	# Load a colon-separated file that maps:
	# SCHEMA:HOST:PORT
	fh = open(fn, 'rb')
	for line in fh:
		line = re.sub('[\n\r\f]', '', line) # Remove newlines and stuff
		line = re.sub('#.*', '', line) # Strip comments
		line = re.sub('^\s+', '', line)
		line = re.sub('\s+$', '', line)
		if(re.match('^$', line)):
			continue # Skip blank lines
		(schema, host, port) = string.split(line, ':', 2)
		ret = {}
		ret[schema] = {}
		ret[schema]['host'] = host
		ret[schema]['port'] = port
	fh.close()
	if '_DEFAULT' not in ret:
		print("You must define a _DEFAULT schema\n")
		sys.exit(1)
	return ret

def route_for_destination(schema):
	# Given a schema, return the (host,port) pair it maps to
	if not schema in proxy:
		schema = "_DEFAULT" # We should always have entries for this
	host = proxy[schema]['host']
	port = proxt[schema]['port']
	return host, port

def get_router_iterable():
	# Packages the entire routing config up into a single data structure
	# for something to walk it efficiently by endpoint rather than by schema served.
	# returns a 2-key a-a with ip and port as the 2 keys, and the value
	# being a reference to a list of the schemas served by the endpoint.
	ret = ()
	schemot = proxy.keys()
	for schema in schemot:
		host = proxy[schema]['host']
		port = proxy[schema]['port']
		if not host in ret:
			ret[host] = {}
		if not port in ret[host]:
			ret[host][port] = ()
		ret[host][port].append(schema)
	return ret

###############
# Wire Protocol and BSON stuff

def bson_docset_to_docarray(data, numdocs=0):
	# Given BSON data that can contain multiple documents, and an optional specifier
	# of how many docs should be in there, return an array of those docs.
	ret = ()
	datf = StringIO.StringIO(data)
	while true:
		msglen = datf.read(4)
		if msglen == '':
			break
		msglen_decoded = unpack('l', msglen)
		thisdoc = datf.read(msglen_decoded)
		ret.append(thisdoc)
		if numdocs != 0:
			numdocs -= 1
	datf.close()
	if numdocs != 0:
		raise Exception('Protocol error in unpacking BSON docset')
	return ret

def info_message(msg):
	ret = ''
	ret += 'Message(' + msg['msglen_decoded'] + '): ' + msg['opname'] + '(' + msg['opcode_decoded'] + ")\n"
	if 'schema' in msg:
		ret += "\tSchema: " + msg['schema'] + "\n"
	if 'table' in msg:
		ret += "\tTable: " + msg['table'] + "\n"
	if 'reqid_decoded' in msg:
		ret += "\tRequest has ID " + msg['reqid_decoded'] + "\n"
	if 'respto_decoded' in msg:
		ret += "\tRequest is to ID " + msg['respto_decoded'] + "\n"
	if 'bson' in msg:
		ret += "--------BEGIN DUMPER--------\n";
		ret += pprint.pformat(msg['bson']) + "\n";
		ret += "--------END DUMPER--------\n";
	return ret

def parse_reply(resp):
	# Parse reply sent by a backend server
	rfh = StringIO.StringIO(resp)
	ret = read_message(rfh)
	rfh.close()
	return ret

def read_message(fh):
	ret = {}
	ret['msglen'] = fh.read(4)
	ret['reqid']  = fh.read(4)
	ret['respto'] = fh.read(4)
	ret['opcode'] = fh.read(4)
	ret['raw'] = ''.join(ret['msglen'], ret['reqid'], ret['respto'], ret['opcode'])
	ret['msglen_decoded'] = unpack('l', ret['msglen'])
	ret['opcode_decoded'] = unpack('l', ret['opcode'])
	ret['reqid_decoded']  = unpack('l', ret['reqid'])
	ret['respto_decoded'] = unpack('l', ret['respto'])
	content = ''
	if ret['msglen_decoded'] > 16:
		content = fh.read(ret['msglen_decoded'] - 16)
	parse_op(ret['opcode'], content, ret) # dictionaries are passed by reference!
	ret['raw'] += content
	return ret

def parse_op(opcode, request, opinfo):
	# Pass in: (non-decoded) opcode, request
	# Returns: (updates opinfo in-place)
	#
	# XXX May need to rewrite all this with splits rather than offsets
	opinfo = {}
	opcode_d = unpack('l', opcode)
	if opcode_d == 2001: # OP_UPDATE
		selectordoc = request[calcsize('l')+9+len(request):] # 9 = 2L + strlen + null term
		(schema, table) = request[calcsize('l'):].split('.', 1)
		opinfo['opname'], opinfo['schema'], opinfo['table'] = 'OP_UPDATE', schema, table
	elif opcode_d == 2002: # OP_INSERT
		qdoc = request[calcsize('l')+5+len(request):] # 5 = 1L + strlen + null-termination
		dec_docset = map(lambda docarray: BSON.decode(docarray), qdoc)
		(schema, table) = coll.split('.', 1)
		opinfo['opname'], opinfo['schema'], opinfo['table'], opinfo['bson'] = 'OP_UPDATE', schema, table, dec_docset
	elif opcode_d == 2004: # OP_QUERY
		qdoc = request[calcsize('l')+13+len(request):] # 13 = 3L + strlen + null-termination
		dec_docset = map(lambda docarray: BSON.decode(docarray), qdoc)
		(schema, table) = coll.split('.', 1)
		opinfo['opname'], opinfo['schema'], opinfo['table'], opinfo['bson'] = 'OP_QUERY', schema, table, dec_docset
	elif opcode_d == 2005: # OP_GET_MORE
		post_l = request[calcsize('l'):] # Seek past a l
		(coll,_) = post_l.split('\x00', 1) # And save the stuff before the null
		(schema, table) = coll.split('.', 1)
		opinfo['opname'], opinfo['schema'], opinfo['table'] = 'OP_GET_MORE', schema, table
	elif opcode_d == 2006: # OP_DELETE
		qdoc = request[calcsize('l')+9+len(request):] # 9 = 2L + strlen + null-termination
		dec_docset = map(lambda docarray: BSON.decode(docarray), qdoc)
		(schema, table) = coll.split('.', 1)
		opinfo['opname'], opinfo['schema'], opinfo['table'], opinfo['bson'] = 'OP_QUERY', schema, table, dec_docset
	elif opcode_d == 2007: # OP_KILL_CURSORS
		opinfo['opname'] = 'OP_KILL_CURSORS'
	elif opcode_d == 1: # OP_REPLY
		(_, cursorid, startfrom, numret) = unpack('lqll', request)
		qdoc = request[20:] # 5L = lqll
		dec_docset = map(lambda docarray: BSON.decode(docarray), qdoc)
		opinfo['opname'], opinfo['bson'] = 'OP_REPLY', dec_docset
	else:
		opinfo['opname'] = 'OP_UNKNOWN'

def command_admin(req):
	# True if this is a request to the admin schema, else False
	if 'schema' in req and req[schema] == 'admin':
		return 1
	return 0

def extract_admin_cmd(req):
	bsonlist = req['bson']
	hr = bsonlist[0]
	return hr.keys()[0]

def extract_schema_info_from_response(req):
	# Return an a-a with schema names as key, value is something
	# extract_schema_info_from_response() can use
	ret = {}
	bsonlist = req['bson']
	rep = bsonlist[0]
	dbs = rep['databases']
	for db in dbs:
		ret[db['name']]['sizeOnDisk'] = db['sizeOnDisk']
		ret[db['name']]['empty'] = db['empty']
		ret[db['name']]['name'] = db['name']
	return ret

def build_filtered_schemalist(listreq, pool):
	# Reach out to backend databases, build data structure with info on schemas
	# that exist on them that we can reach w/ our current config, suitable for building
	# a response to the listDatabases command
	pass

def cmd_forbidden(cmd):
	forbidden = 	{
			'shutdown'		:1,
			'replSetGetStatus'	:1,
			'replSetFreeze'		:1,
			'replSetInitiate'	:1,
			'replSetMaintenance'	:1,
			'replSetReconfig'	:1,
			'replSetStepDown'	:1,
			'replSetSyncFrom'	:1,
			'resync'		:1,
			'replSetGetConfig'	:1,
			'flushRouterConfig'	:1,
			'addShard'		:1,
			'cleanupOrphaned'	:1,
			'checkShardingIndex'	:1,
			'enableSharding'	:1,
			'listShards'		:1,
			'removeShard'		:1,
			'getShardMap'		:1,
			'getShardVersion'	:1,
			'mergeChunks'		:1,
			'setShardVersion'	:1,
			'shardCollection'	:1,
			'shardingState'		:1,
			'unsetSharding'		:1,
			'split'			:1,
			'splitChunk'		:1,
			'splitVector'		:1,
			'medianKey'		:1,
			'moveChunk'		:1,
			'movePrimary'		:1,
			'isdbgrid'		:1,
			'logRotate'		:1
			}
	if cmd in forbidden:
		return 1
	return 0


##############
# Speak BSON

def bson_i_refuse(reqid):
	# Generate an OP_REPLY with a payload amounting to refusing an operation
	pass

def bson_response_listDatabases(reqid,dbinfo):
	# Generrate an OP_REPLY with a payload that's a valid response to listDatabases
	pass

def schinfo_totalsize(schemot):
	size = 0
	for schema in schemot.keys():
		size += schemot[schema]['sizeOnDisk']
	return size

##############
# Poor man's connection pool

def ensure_mongo_connection(pool, host, port):
	# Make sure there's a connection to this server
	# Return that connection.
	pass

if __name__ == "__main__":
	global proxy
	proxy = setup_proxy(proxycfg)
	server = SocketServer.TCPServer(('localhost', proxy_lport), MyTCPHandler)
	server.serve_forever()


