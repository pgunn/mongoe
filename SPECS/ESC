Endpoint Shape Compression

Pat Gunn

ESC is a protocol feature intended to reduce bandwidth use in performing inserts in MongoDB.
Initially intended to be implemented in a future version of mongoe, the feature will be negotiated
between two mongoe processes on either side of the link (although there's no reason a driver
or a mongod/mongos could not have the feature), and when enabled on both sides, they will speak
an alternative to BSON for OP_INSERT operations that is significantly smaller.

If the feature is succesfully enabled, rather than using OP_INSERT (opcode 2002), a client will
negotiate four additional opcodes with the server, which we will call OP_INSERT_Q,
OP_INSERT_R, OP_INSERT_S, and OP_QSHAPE. OP_INSERT will still be available for clients that wish to use it,
with unchanged semantics.

The format and meaning of these is as follows:

-------------
OP_INSERT_Q (op insert query) has an identical structure to OP_INSERT, but a different opcode.
It is used when the client does not have the current document shape in its shape cache.
Unlike an OP_INSERT, an OP_INSERT_Q gets a response; it receives an OP_INSERT_R


-------------
OP_INSERT_R (op insert response) has the following format:

struct OP_INSERT_R {
	MsgHeader header; // standard message header
	int64 reserved;
	int32 shapeId;
}

A shapeid is only guaranteed to the client to be valid for the duration and within the scope of
a connection; servers are permitted but not required to have broader scopes, and clients must not
depend on broader scopes; they are required to use OP_INSERT_Q to get a valid shapeId.

------------
OP_INSERT_S (op insert shaped) has the same shape as an OP_INSERT, except instead of a document, it
takes an esdoc:

struct OP_INSERT_S {
	MsgHeader header;
	int32 flags;
	cstring fullCollectionName;
	esdoc* documents;
}

An ESDoc is a packed format with the shape information removed; it is shaped as follows:

esdocument ::= int32 int32 BYTES "\x00"    	# The first int32 is the number of bytes in the esdoc,
						# the second is a shapeId

The structure within BYTES is exactly the same as the BSON spec, except with all the
tagging and e_names removed, leaving only the payload. For fields that lack a payload,
their presence is simply recorded in the shape and they do not need to be transmitted.

----------
The OP_QSHAPE (op query shape) is intended to populate a cache without otherwise performing
data operations. It has the same sematics as OP_INSERT_Q (including expected response), but
the server must extract the shape and not perform any DML.

There is no provision for mixing esdocs and documents in the same insert operation. Don't do that.

-------------------------
Packing notes for esshapes and esdocuments:
*esshapes can have sub-esshapes. The deep shape of a document is represented by a shapeid,
	so two documents that are superficially the same but which have different subdocs
	will not share a shapeid. esshapes are serialised deep shape information.
*The subdocument used for BSON type 0x0D (Javascript) is not considered document shape info from
	ESC's perspective, and is stuffed into an esdocument as a BSON document.
*The string in BSON type 0x0C (DBPointer) is pushed into the esdocument
*Length and type information in BSON type 0x05 (Binary) is considered value-ish rather than shape-ish,
	and is pressed into the esdocument. Thus two otherwise-identically-shaped documents that have
	type or length information that differ in a BSON field will share the same shapeid.
*BSON strings (not cstrings), because they include recorded length information, have their null
	terminator stripped in esdocuments. The length information is NOT adjusted downwards from this
	stripping.


